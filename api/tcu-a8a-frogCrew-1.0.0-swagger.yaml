openapi: 3.0.3
info:
  title: FrogCrew API - Filtered
  version: 1.0.0
  description: Only includes endpoints relevant to 11 required use cases
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/tcu-a8a/frogCrew/1.0.0
  - url: https://localhost:8080
paths:
  /crewMember:
    post:
      summary: Add a crew member (UC-1)
      requestBody:
        required: true
        content:
          application/json:
            example:
              firstName: John
              lastName: Doe
              email: john.doe@example.com
              phoneNumber: "1234567890"
              password: P@ssw0rd
              role: ADMIN
              positions: ["Director", "Producer"]
      responses:
        '200':
          description: Crew member added and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Add Success
                data:
                  id: 1
                  firstName: John
                  lastName: Doe
                  email: john.doe@example.com
                  phoneNumber: "1234567890"
                  role: ADMIN
                  positions: ["DIRECTOR", "PRODUCER"]
        '400':
          description: Bad input parameter
          content:
            application/json:
              example:
                flag: false
                code: 400
                message: Provided arguments are invalid, see data for details.
                data:
                  firstName: First name is required
                  lastName: Last name is required
                  email: Email is required
                  phoneNumber: Phone number is required
                  role: Role is required
                  positions: Positions is required

  /crewMember/find:
    get:
      summary: Find crew members (UC-16)
      responses:
        '200':
          description: Crew member found and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Find Success
                data:
                  - userId: 1
                    fullName: John Doe
                    email: john.doe@example.com
                    phoneNumber: "1234567890"
                  - userId: 2
                    fullName: Jane Smith
                    email: Jane.Smith@example.com
                    phoneNumber: "1112223333"

  /invite/{token}:
    get:
      summary: Validate Invite (UC-1)
      parameters:
        - in: path
          name: token
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Invitation valid
                data:
                  token: 123456
        '404':
          description: Token not found
          content:
            application/json:
              example:
                flag: false
                code: 404
                message: Invitation not valid
                data: null

  /invite:
    post:
      summary: Invite Crew Member (UC-14)
      requestBody:
        required: true
        content:
          application/json:
            example:
              emails: ["john.smith@example.com", "jane.doe@example.com"]
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Invite Success
                data:
                  - john.smith@example.com
                  - jane.doe@example.com

  /crewMember/{userId}:
    get:
      summary: Find crew member by id (UC-3)
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Crew member found and returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Find Success
                data:
                  userId: 1
                  firstName: John
                  lastName: Doe
                  email: john.doe@example.com
                  phoneNumber: "1234567890"
                  role: ADMIN
                  positions: ["DIRECTOR", "PRODUCER"]
        '404':
          description: User not found
          content:
            application/json:
              example:
                flag: false
                code: 404
                message: Could not find user with id 1
                data: null

  /crewMember/disable/{userId}:
    put:
      summary: Disable a crew member (UC-15)
      parameters:
        - in: path
          name: userId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Crew member disabled
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Disable Success
                data: null
        '404':
          description: User not found
          content:
            application/json:
              example:
                flag: false
                code: 404
                message: Could not find user with id 1
                data: null

  /gameSchedule:
    post:
      summary: Add game schedule (UC-18)
      requestBody:
        required: true
        content:
          application/json:
            example:
              sport: Football
              season: 2024-2025
      responses:
        '200':
          description: Game schedule created
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Add Success
                data:
                  id: 1
                  sport: Football
                  season: 2024-2025

  /gameSchedule/games:
    get:
      summary: Find all games (UC-5)
      responses:
        '200':
          description: Games list returned
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Find Success
                data:
                  - gameId: 1
                    scheduleId: 1
                    gameDate: 2024-09-07
                    venue: Carter
                    opponent: LIU
                    isFinalized: false
                  - gameId: 2
                    scheduleId: 1
                    gameDate: 2024-09-14
                    venue: Carter
                    opponent: UCF
                    isFinalized: false

  /gameSchedule/{scheduleId}/games:
    post:
      summary: Add game to schedule (UC-20)
      parameters:
        - in: path
          name: scheduleId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            example:
              gameDate: 2024-09-07
              venue: Carter
              opponent: LIU
              isFinalized: true
      responses:
        '200':
          description: Game added
          content:
            application/json:
              example:
                flag: true
                code: 200
                message: Add Success
                data:
                  gameId: 1
                  scheduleId: 1
                  gameDate: 2024-09-07
                  venue: Carter
                  opponent: LIU
                  isFinalized: true